//////////////////////////////////
//mixins //////////////////
////////////////////////////////

//media break points
@mixin bp($point) {
	@if $point == xSmall {
		@media (min-width: 400px) { @content; }
	}
	@else if $point == small {
		@media (min-width: 600px) { @content; }
	}
	@else if $point == medium {
		@media (min-width: 768px) { @content; }
	}
	@else if $point == large {
		@media (min-width: 1024px)  { @content; }
	}
	@else if $point == xLarge {
		@media (min-width: 1280px)  { @content; }
	}
}

@mixin rbp($point) {
	@media (min-width: #{$point}px) { @content; }
}


//css3
@mixin background-size ($value) {
  -webkit-background-size: $value;
          background-size: $value;
}

@mixin border-radius ($values) {
	-webkit-border-radius: $values;
	   -moz-border-radius: $values;
	        border-radius: $values;
	-webkit-background-clip: padding-box; 
	       -moz-background-clip: padding; 
	        background-clip: padding-box;
}

@mixin box-shadow ($x, $y, $offset, $hex,  $inset: null, $spread:null) {
     -moz-box-shadow: $x $y $offset $spread $hex $inset;
  -webkit-box-shadow: $x $y $offset $spread $hex $inset;
          box-shadow: $x $y $offset $spread $hex $inset;
}

@mixin box-sizing($value) {
     -moz-box-sizing: $value;
  -webkit-box-sizing: $value;
          box-sizing: $value;
}

@mixin rgba-bg ($hex, $alpha) {     
	background-color: $hex;
	background-color: rgba($hex, $alpha);
}

@mixin transition ($value) {
     -moz-transition: $value;
       -o-transition: $value;
      -ms-transition: $value;
  -webkit-transition: $value;
          transition: $value;
}

//common use
@mixin reset {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-size: 100%;
  vertical-align: baseline;
  background: transparent;
}

@mixin zipMP {
	margin: 0;
	padding: 0;
}

//cover everything block
@mixin coverPage {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

//center
@mixin centerIt {
  position: absolute;
  top: 50%;
  left: 50%;
  -webkit-transform:translate(-50%, -50%);
   -moz-transform:translate(-50%, -50%);
    -ms-transform:translate(-50%, -50%);
     -o-transform:translate(-50%, -50%);
        transform:translate(-50%, -50%);
}

//ellipsis
@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

//standard Wrapper padding 
@mixin pads {
	padding: 0 1.618em;

	@include bp(medium) {
		padding: 0 2.618em;
	}
}

@mixin cf {
	&:after,
	&:before {
		content: "";
		display: table;
		clear: both;
	}
}

//transition vender prefix
@mixin single-trans($what, $sec, $ease, $delay: 0) {
	-webkit-transition: $what $sec $ease $delay;
	-moz-transition: $what $sec $ease $delay;
	transition: $what $sec $ease $delay;
}

@mixin bounce() {
	-webkit-animation-timing-function: cubic-bezier(0.6,1.5,0.6,1);
	-moz-animation-timing-function: cubic-bezier(0.6,1.5,0.6,1);
	animation-timing-function: cubic-bezier(0.6,1.5,0.6,1);
}

@mixin partAnim($num) {
	-webkit-animation: animPart#{$num} 6s infinite;
	-moz-animation: animPart#{$num} 6s infinite;
	animation: animPart#{$num} 6s infinite;
}

@mixin code {
	-webkit-animation: code 6s infinite;
	-moz-animation: code 6s infinite;
	animation: code 6s infinite;
}

@mixin pulse {
	-webkit-animation: pulse 3s infinite;
	-moz-animation: pulse 3s infinite;
	animation: pulse 3s infinite;
}

@mixin dash {
	-webkit-animation:dash 4.5s linear forwards;
	-moz-animation:dash 4.5s linear forwards;
	animation:dash 4.5s linear forwards;
}

@mixin trans($cord, $cord2) {
  -webkit-transform: translate($cord, $cord2);
  -ms-transform: translate($cord, $cord2);
  transform: translate($cord, $cord2);
}

@mixin keyframes($animationName) {
    @-webkit-keyframes $animationName {
        @content;
    }
    @-moz-keyframes $animationName {
        @content;
    }
    @keyframes $animationName {
        @content;
    }
}
